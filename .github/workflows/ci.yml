name: Jaswant Networking

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  build-and-lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install backend deps
        working-directory: networking-backend
        run: npm ci

      - name: Lint backend
        working-directory: networking-backend
        run: npm run lint -- --max-warnings=0

      - name: Install frontend deps
        working-directory: networking-frontend
        run: npm ci

      - name: Lint frontend
        working-directory: networking-frontend
        run: npm run lint -- --max-warnings=0

      - name: Build backend Docker image
        run: docker build -t backend ./networking-backend

      - name: Build frontend Docker image
        run: docker build -t frontend ./networking-frontend

  deploy:
    needs: build-and-lint
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Add EC2 host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "$EC2_HOST" >> ~/.ssh/known_hosts
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}

      - name: Write SSH key
        run: |
          echo "${EC2_KEY}" > ec2_key.pem
          chmod 600 ec2_key.pem
        env:
          EC2_KEY: ${{ secrets.EC2_KEY }}

      - name: Deploy on EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_APP_DIR: ${{ secrets.EC2_APP_DIR }}
        run: |
          ssh -i ec2_key.pem ${EC2_USER}@${EC2_HOST} << EOF
            set -e
            cd "${EC2_APP_DIR}" || exit 1
            # fetch latest code
            git fetch --all
            git reset --hard origin/main
            # rebuild containers
            docker compose up -d --build
            # clean old images
            docker image prune -f
            docker compose ps
          EOF

# name: Jaswant Networking

# on:
#   push:
#     branches: [main, dev]
#   pull_request:
#     branches: [main, dev]

# jobs:
#   build-and-lint:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repo
#         uses: actions/checkout@v3

#       - name: Setup Node
#         uses: actions/setup-node@v3
#         with:
#           node-version: 20

#       - name: Install backend deps
#         working-directory: networking-backend
#         run: npm ci

#       - name: Lint backend
#         working-directory: networking-backend
#         run: npm run lint -- --max-warnings=0

#       - name: Install frontend deps
#         working-directory: networking-frontend
#         run: npm ci

#       - name: Lint frontend
#         working-directory: networking-frontend
#         run: npm run lint -- --max-warnings=0

#       - name: Build backend Docker image
#         run: docker build -t backend ./networking-backend

#       - name: Build frontend Docker image
#         run: docker build -t frontend ./networking-frontend

#   deploy:
#     needs: build-and-lint
#     if: github.event_name == 'push'
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repo
#         uses: actions/checkout@v3

#       - name: Add EC2 host to known_hosts
#         run: |
#           mkdir -p ~/.ssh
#           ssh-keyscan -H "$EC2_HOST" >> ~/.ssh/known_hosts
#         env:
#           EC2_HOST: ${{ secrets.EC2_HOST }}

#       - name: Write SSH key
#         run: |
#           echo "${EC2_KEY}" > ec2_key.pem
#           chmod 600 ec2_key.pem
#         env:
#           EC2_KEY: ${{ secrets.EC2_KEY }}

#       - name: Run Ansible playbook
#         uses: dawidd6/action-ansible-playbook@v2
#         with:
#           playbook: ansible/install_docker.yml
#           inventory: ansible/hosts.ini
#           key: ${{ secrets.EC2_KEY }}

#       - name: Deploy on EC2
#         env:
#           EC2_HOST: ${{ secrets.EC2_HOST }}
#           EC2_USER: ${{ secrets.EC2_USER }}
#           EC2_APP_DIR: ${{ secrets.EC2_APP_DIR }}
#         run: |
#           ssh -i ec2_key.pem ${EC2_USER}@${EC2_HOST} << EOF
#             set -e
#             cd "${EC2_APP_DIR}" || exit 1
#             # fetch latest code
#             git fetch --all
#             git reset --hard origin/main
#             # rebuild containers
#             docker compose up -d --build
#             # clean old images
#             docker image prune -f
#             docker compose ps
#           EOF
